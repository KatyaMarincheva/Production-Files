using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Excel = Microsoft.Office.Interop.Excel;
using Outlook = Microsoft.Office.Interop.Outlook;

namespace CheckForAlertMail
{
    class Program
    {
        private static int counter = 0;
        private static string input = string.Empty;
        private static string today = DateTime.Now.ToString("yyyy-MM-dd");
        private static List<string> alert = new List<string>();
        private static List<List<string>> alerts = new List<List<string>>();
        private static string[] head = GetHeadline();
        private static Excel.Application xlApp = new Excel.Application();
        private static Outlook.Application outlook = new Outlook.Application();
        private static Outlook.MAPIFolder folder;
        private static Outlook.MailItem mailItem = null;
        private static object folderItem = null;
        private static Outlook.MailItem[] mail = null;
        private static Excel.Workbook wb = xlApp.Workbooks.Add(Excel.XlWBATemplate.xlWBATWorksheet);
        private static Excel.Worksheet ws = CreateXlWorksheet();

ã€€
        static void Main(string[] args)
        {
            // check if alert email is received
            if (EmailReceived())
            {
                xlApp.Visible = true;

                // write to report email received time and checked time
                WriteToReport(mail);

                // write report to Excel
                WriteToExcel(ws);
                ws.Columns.AutoFit();

                // saves current changes and closes Excel Workbook
                SaveAndCloseWoorkbook();

                // move the received e-mail to Actioned folder
                MoveToActioned();
            }
            else
            {
                // if the automatic email from the server was not received - send email to inbox to warn 
                SendEmail();
            }
        }

        private static void SaveAndCloseWoorkbook()
        {
            xlApp.DisplayAlerts = false;

            string path = @"C:\Users\marinchk\Desktop\report1.xsls";
            wb.SaveAs(path, Microsoft.Office.Interop.Excel.XlFileFormat.xlWorkbookNormal,
Type.Missing, Type.Missing, Type.Missing, Type.Missing, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlExclusive,
Type.Missing, Type.Missing, Type.Missing,
Type.Missing, Type.Missing);
            wb.Close(true, Type.Missing, Type.Missing);
            ws = null;
            wb = null;
            xlApp.Quit();
            GC.WaitForPendingFinalizers();
            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();
        }

        private static bool EmailReceived()
        {
            // access outlook inbox
            folder =
                outlook
                .GetNamespace("MAPI")
                .GetDefaultFolder(Outlook.OlDefaultFolders.olFolderInbox);

            // get mails from ABC folder
            mail =
                folder.Folders["ABC"]
                .Items
                .OfType<Outlook.MailItem>()
                .Select(m => m).ToArray();

            return mail.Length == 1;
        }

        private static void WriteToReport(Outlook.MailItem[] mail)
        {
            // write to report when the sever email was received and when it was checked
            counter++;
            alert.Add(counter.ToString());
            alert.Add(mail[0].ReceivedTime.ToString());
            alert.Add(DateTime.Now.ToString());
            alerts.Add(alert);
        }

        private static void MoveToActioned()
        {
            // access outlook subfolder ABC
            string oSubfolderName = "ABC";
            folder =
                outlook
                .GetNamespace("MAPI")
                .GetDefaultFolder(Outlook.OlDefaultFolders.olFolderInbox);

            Outlook.Items items = folder.Folders[oSubfolderName].Items;
            folderItem = items.GetFirst();

            // check for emails in the subfolder
            while (folderItem != null)
            {
                mailItem = folderItem as Outlook.MailItem;
                if (mailItem != null)
                {
                    mailItem.Move(folder.Folders["ABC Actioned"]);

                    items = folder.Folders[oSubfolderName].Items;
                }

                folderItem = items.GetFirst();
            }
        }

        // this method provides the Excel worksheet columns names
        private static string[] GetHeadline()
        {
            return new string[]
            {
                "N",
                "Recieved",
                "Checked",
            };
        }

        private static Excel.Worksheet CreateXlWorksheet()
        {
            // create worksheet           
            Excel.Worksheet ws = (Excel.Worksheet)wb.Worksheets[1];
            ws.Name = today;

            // format title line
            Excel.Range range = ws.Range["A1"];
            range.Value = "ABC Alerts Report";
            range.Style.Font.Size = 15;
            range.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
            range.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            range.EntireRow.Font.Bold = true;
            range.Interior.Color = Excel.XlRgbColor.rgbBlack;
            range.Font.Color = Excel.XlRgbColor.rgbWhite;
            Excel.Range aRange = ws.get_Range("A1", "C2");
            aRange.Merge();

            // format headline
            Excel.Range bRange = ws.get_Range("A3", "C3");
            bRange.Interior.Color = Excel.XlRgbColor.rgbBlack;
            bRange.Font.Color = Excel.XlRgbColor.rgbWhite;
            SetRow(bRange, head);

            return ws;
        }

        private static void WriteToExcel(Excel.Worksheet ws)
        {
            for (int i = 0; i < alerts.Count; i++)
            {
                string AFormat = string.Format("A{0}", i + 4);
                string HFormat = string.Format("C{0}", i + 4);
                Excel.Range lRange = ws.get_Range(AFormat, HFormat);

                SetRow(lRange, alerts[i].ToArray());
            }
        }
        private static void SetRow(Excel.Range range, string[] data)
        {
            range.get_Resize(1, data.Length).Value2 = data;
        }

        private static void SendEmail()
        {
            string subjectEmail = "TAO email NOT received!";
            string bodyEmail = "TAO email NOT received!";
            string emailAddress = "marincheva@hpe.com";
 
            CreateEmailItem(subjectEmail, emailAddress, bodyEmail);
        }

        private static void CreateEmailItem(string subjectEmail,
               string toEmail, string bodyEmail)
        {
        Outlook.MailItem eMail = (Outlook.MailItem)
                outlook.CreateItem(Outlook.OlItemType.olMailItem);
            eMail.Subject = subjectEmail;
            eMail.To = toEmail;
            eMail.Body = bodyEmail;
            eMail.Importance = Outlook.OlImportance.olImportanceHigh;
            (eMail).Send();
        }
    }
}
