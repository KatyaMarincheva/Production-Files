using System;
using System.Collections.Generic;
using System.Linq;
using Excel = Microsoft.Office.Interop.Excel;
using Outlook = Microsoft.Office.Interop.Outlook;

namespace CheckForAlertMail
{
    class CheckForAlertMail
    {
        #region Variables
        // report related variables
        private static int counter = 0;
        private static string[] alert = new string[3];

        // Outlook related variables
        private static Outlook.Application outlook = new Outlook.Application();
        private static Outlook.MAPIFolder folder;
        private static List<Outlook.MailItem> mail;
        private static object folderItem;
        private static Outlook.MailItem mailItem;
        private static string oSubfolderName = "ABC";
        public static string oSubfolderActionedName = "ABC Actioned";

        // Excel related variables
        private static Excel.Application xlApp = new Excel.Application();
        private static Excel.Workbook wb;
        private static Excel.Worksheet ws;
        private static Excel.Sheets oWorkSheets;
        private static Excel.Range range;
        private static int colCount;
        private static int rowCount;
        private static string today = DateTime.Now.ToString("yyyy-MM-dd");
        private static string path = string.Format(@"C:\Users\marinchk\Desktop\ABC report {0}.xlsx", today);
        private static string[] columnsNames = GetColumnsNames();
        #endregion Variables

        static void Main(string[] args)
        {
            // check if alert email is received
            if (EmailReceived())
            {
                // write to report email received time and checked time
                WriteToReport(mail);

                xlApp.Visible = true;

                if (!System.IO.File.Exists(path))
                {
                    ws = CreateXlWorksheet();

                    // write report to Excel
                    WriteToExcel(ws);
                    ws.Columns.AutoFit();
                }
                else
                {
                    OpenExcelWorkbook();

                    // add next report to same Excel workbook
                    AddTextToExcel(ws);
                }

                //Console.ReadLine();
                // saves current changes and closes Excel Workbook
                SaveAndCloseWoorkbook();

                // move the received e-mail to Actioned folder
                MoveToActioned();
            }
            else
            {
                // if the automatic email from the server was not received - send email to inbox to warn 
                SendEmail();
            }
        }

        #region Outlook
        #region OutlookInput
        private static bool EmailReceived()
        {
            // access outlook inbox
            folder =
                outlook
                .GetNamespace("MAPI")
                .GetDefaultFolder(Outlook.OlDefaultFolders.olFolderInbox);

            // get mails from ABC folder
            mail =
                folder
                .Folders[oSubfolderName]
                .Items
                .OfType<Outlook.MailItem>()
                .Select(m => m).ToList();

            return mail.Count == 1;
        }
        #endregion OutlookInput

        #region OutlookOutput
        private static void MoveToActioned()
        {
            // access outlook subfolder ABC and get all emails
            Outlook.Items items = folder.Folders[oSubfolderName].Items;
            folderItem = items.GetFirst();

            // check for emails in the subfolder
            while (folderItem != null)
            {
                mailItem = folderItem as Outlook.MailItem;
                if (mailItem != null)
                {
                    mailItem.Move(folder.Folders[oSubfolderActionedName]);

                    items = folder.Folders[oSubfolderName].Items;
                }

                folderItem = items.GetFirst();
            }
        }

        private static void SendEmail()
        {
            string subjectEmail = "TAO email NOT received!";
            string bodyEmail = "TAO email NOT received!";
            string emailAddress = "marincheva@hpe.com";

            CreateEmailItem(subjectEmail, emailAddress, bodyEmail);
        }

        private static void CreateEmailItem(string subjectEmail,
               string toEmail, string bodyEmail)
        {
            Outlook.MailItem eMail = (Outlook.MailItem)
                    outlook.CreateItem(Outlook.OlItemType.olMailItem);
            eMail.Subject = subjectEmail;
            eMail.To = toEmail;
            eMail.Body = bodyEmail;
            eMail.Importance = Outlook.OlImportance.olImportanceHigh;
            (eMail).Send();
        }
        #endregion OutlookOutput
        #endregion Outlook

        #region Report
        private static void WriteToReport(List<Outlook.MailItem> mail)
        {
            // write to report when the sever email was received and when it was checked
            counter++;
            alert[0] = counter.ToString();
            alert[1] = mail[0].ReceivedTime.ToString();
            alert[2] = DateTime.Now.ToString();
        }
        #endregion Report

        #region Excel
        #region ExcelInput
        // this method provides the Excel worksheet columns names
        private static string[] GetColumnsNames()
        {
            return new string[]
            {
                "N",
                "Recieved",
                "Checked",
            };
        }

        private static Excel.Worksheet CreateXlWorksheet()
        {
            // create Excel workbook
            wb = xlApp.Workbooks.Add(Excel.XlWBATemplate.xlWBATWorksheet);
            // create worksheet           
            Excel.Worksheet ws = (Excel.Worksheet)wb.Worksheets[1];

            // format title line
            range = ws.Range["A1"];
            range.Value = "ABC Alerts Report";
            range.Style.Font.Size = 15;
            range.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
            range.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            range.EntireRow.Font.Bold = true;
            range.Interior.Color = Excel.XlRgbColor.rgbBlack;
            range.Font.Color = Excel.XlRgbColor.rgbWhite;
            Excel.Range aRange = ws.get_Range("A1", "C2");
            aRange.Merge();

            // format headline
            Excel.Range bRange = ws.get_Range("A3", "C3");
            bRange.Interior.Color = Excel.XlRgbColor.rgbBlack;
            bRange.Font.Color = Excel.XlRgbColor.rgbWhite;
            SetRow(bRange, columnsNames);

            return ws;
        }

        private static void OpenExcelWorkbook()
        {
            wb = xlApp.Workbooks.Open(path, 0, false, 5, "", "", false, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);

            //Get all the sheets in the workbook
            oWorkSheets = wb.Worksheets;
            //Get the allready exists sheet
            ws = (Excel.Worksheet)oWorkSheets[1];
            range = ws.UsedRange;
            colCount = range.Columns.Count;
            rowCount = range.Rows.Count;
        }
        #endregion ExcelInput

        #region ExcelOutput
        private static void WriteToExcel(Excel.Worksheet ws)
        {
            string AFormat = string.Format("A{0}", +4);
            string HFormat = string.Format("C{0}", +4);
            Excel.Range lRange = ws.get_Range(AFormat, HFormat);

            SetRow(lRange, alert);
        }

        private static void AddTextToExcel(Excel.Worksheet ws)
        {
            string AFormat = string.Format("A{0}", (rowCount + 1));
            string HFormat = string.Format("C{0}", (rowCount + 1));
            Excel.Range lRange = ws.get_Range(AFormat, HFormat);

            SetRow(lRange, alert);
        }

        private static void SetRow(Excel.Range range, string[] data)
        {
            range.get_Resize(1, data.Length).Value2 = data;
        }
        #endregion ExcelOutput

        #region ExcelClose
        private static void SaveAndCloseWoorkbook()
        {
            // avoid "do you want to replace the existing file?" pop-up
            xlApp.DisplayAlerts = false;

            // save Excel workbook as
            wb.SaveAs(path,
                Type.Missing,
                Type.Missing,
                Type.Missing,
                Type.Missing,
                Type.Missing,
                Excel.XlSaveAsAccessMode.xlNoChange,
                Type.Missing,
                Type.Missing,
                Type.Missing,
                Type.Missing,
                Type.Missing);

            // close Excel workbook
            wb.Close(true, Type.Missing, Type.Missing);

            // gradually quit the Excel Application
            ws = null;
            wb = null;
            xlApp.Quit();
            GC.WaitForPendingFinalizers();
            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();
        }
        #endregion ExcelClose
        #endregion Excel
    }
}
